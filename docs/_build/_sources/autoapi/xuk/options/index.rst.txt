:py:mod:`xuk.options`
=====================

.. py:module:: xuk.options


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   position_builder/index.rst
   position_profit/index.rst
   pricing/index.rst
   strategy/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   xuk.options.Strategy
   xuk.options.PositionBuilder
   xuk.options.OptionPositionProfit
   xuk.options.AssetPositionProfit
   xuk.options.Pricing




.. py:class:: Strategy(call: Optional[polars.DataFrame] = pl.DataFrame(), put: Optional[polars.DataFrame] = pl.DataFrame(), call_put: Optional[polars.DataFrame] = pl.DataFrame())


   It calculates the necessary parameters related to the well-known option trading strategies.

   :param call: polars.DataFrame with (ua:str, ua_sell_price:int, ua_buy_price:int, symbol:str, strike_price:int,
                t:int, bs:int, buy_price:int, sell_price:int) columns. Where ua: Underlying Asset, bs : Black-Scholes
                price, t: Days to expiration date
   :param put: polars.DataFrame with (ua:str, ua_sell_price:int, ua_buy_price:int, symbol:str, strike_price:int,
               t:int, bs:int, buy_price:int, sell_price:int) columns. Where ua: Underlying Asset, bs : Black-Scholes
               price, t: Days to expiration date
   :param call_put:

   .. rubric:: Examples

   Import libraries

   >>> from oxtapus.ise import TSETMC
   >>> from xuk.options import Strategy
   >>> import polars as pl

   Get option data and create object

   >>> data = pl.from_pandas(TSETMC().option_market_watch())
   >>> stg = Strategy(call=data.filter(pl.col("type")=="call"), put=data.filter(pl.col("type")=="put")

   Call strategies

   >>> stg.covered_call()
   shape: (928, 16)
   ┌───────────┬────────────┬───┬────────────┬────────────────┐
   │  writing  ┆ writing_at ┆ … ┆   pct_cp   ┆ pct_monthly_cp │
   │    ---    ┆     ---    ┆   ┆     ---    ┆       ---      │
   │    str    ┆     f64    ┆   ┆     f64    ┆       f64      │
   ╞═══════════╪════════════╪═══╪════════════╪════════════════╡
   │ xxxx 8001 ┆   1961.0   ┆ … ┆  -0.128406 ┆    -0.226599   │
   │     …     ┆      …     ┆ … ┆      …     ┆        …       │
   │ zzzz 1100 ┆    600.0   ┆ … ┆ -16.666667 ┆      -4.0      │
   └───────────┴────────────┴───┴────────────┴────────────────┘

   .. py:method:: covered_call() -> polars.DataFrame

      Is the purchase of a share of stock coupled with a sale of a call option on that stock.

      :returns: * *polars.DataFrame contain (writing, writing_at, buy_ua, buy_ua_at,strike_price,t, pct_status,*
                * *break_even, pct_break_even, max_pot_loss, max_pot_profit, pct_mpp, pct_monthly_cp, current_profit, pct_cp,*
                * *pct_monthly_cp) columns.*


   .. py:method:: married_put() -> polars.DataFrame

      Is the purchase of a share of stock coupled with a purchase of a put option on that stock.

      :returns: * *polars.DataFrame contain (writing, writing_at, buy_ua, buy_ua_at,strike_price,t, pct_status,*
                * *break_even, pct_break_even, max_pot_loss, max_pot_profit, pct_mpp, pct_monthly_cp, current_profit, pct_cp,*
                * *pct_monthly_cp) columns.*


   .. py:method:: bull_call_spread()

      A bull call spread is an options trading strategy that's used when an investor is moderately bullish on the underlying asset (e.g., a stock, index, or commodity) and wants to profit from an anticipated upward price movement while also limiting their potential downside risk. It involves buying one call option and simultaneously selling another call option with the same expiration date but at a higher strike price. This strategy is also known as a "debit call spread" because it typically requires an upfront payment (debit) to establish the position.

      Here are the key components and characteristics of a bull call spread:

      1. **Components**:
         - **Buy a Call Option**: You start by buying a call option with a lower strike price (the strike price at which you have the right to buy the underlying asset).
         - **Sell a Call Option**: Simultaneously, you sell a call option with a higher strike price than the one you bought. This is often referred to as the "short call" or "written call."

      2. **Expiration Date**: Both the long and short call options should have the same expiration date.

      3. **Strike Prices**:
         - The strike price of the long call option is typically below the current market price of the underlying asset.
         - The strike price of the short call option is higher than the strike price of the long call.

      4. **Profit Potential**: A bull call spread profits from a rising price of the underlying asset. The maximum profit is limited and occurs when the price of the underlying asset is above the higher strike price at expiration.

      5. **Risk and Losses**: The maximum loss for a bull call spread is limited to the initial cost (debit) of establishing the position. This loss occurs if the price of the underlying asset is below the lower strike price at expiration.

      6. **Break-even Point**: The break-even point for this strategy is the sum of the lower strike price and the net premium paid for the spread. In other words, it's the point at which your gains equal your initial cost.

      7. **Risk-Reward Ratio**: A bull call spread provides a limited potential profit and a limited potential loss. The risk-reward ratio is typically skewed in favor of limited profit potential.

      8. **Time Decay**: Time decay (theta) can impact the value of both the long and short call options. Generally, the impact of time decay is smaller on the long call than on the short call. This can affect the profitability of the strategy.

      In summary, a bull call spread is a strategy that allows investors to benefit from a moderate bullish view on an underlying asset while controlling their risk. It's a defined-risk strategy with limited profit potential and is often used when an investor expects a moderate price increase but wants to reduce the cost of buying a call option outright. Traders should carefully consider the strike prices, expiration date, and market conditions when implementing this strategy.

      :rtype: polars.DataFrame


   .. py:method:: bear_call_spread()

      A bear call spread is an options trading strategy that involves two call options with the same expiration date but different strike prices. This strategy is used by investors who are moderately bearish on the underlying asset's price and want to profit from a potential decrease in the asset's price. Here's how a bear call spread works:

      1. **Select the Underlying Asset:** You start by choosing an underlying asset, such as a stock, index, or commodity.

      2. **Sell a Call Option:** You sell (write) a call option with a strike price that's closer to the current market price of the underlying asset. This is called the "short call" or "short leg" of the spread. By selling this option, you collect a premium.

      3. **Buy a Call Option:** Simultaneously, you buy a call option with a higher strike price than the one you sold. This is called the "long call" or "long leg" of the spread. This purchase also involves paying a premium.

      4. **Limited Risk:** The primary advantage of the bear call spread is that it has limited risk. The premium received from selling the short call partially offsets the premium paid for the long call. Your maximum loss is capped at the difference between the strike prices minus the net premium received.

      5. **Profit Potential:** Your maximum profit is limited to the net premium you receive when you enter the trade. This profit occurs if the underlying asset's price remains below the strike price of the short call at expiration.

      6. **Break-even Point:** The strategy's break-even point is the strike price of the short call plus the net premium received. As long as the underlying asset's price remains below this point, you won't incur a loss.

      7. **Expiration:** The strategy typically involves holding both the short and long call options until expiration. If the underlying asset's price is below the short call's strike price at expiration, the short call expires worthless, and you keep the premium. The long call can also expire worthless or be sold for any remaining value.

      A bear call spread can be a useful strategy when you expect a moderate downward price movement in the underlying asset. It allows you to profit from the premium received by selling the short call while limiting your potential losses. However, keep in mind that options trading carries risks and should only be undertaken if you understand the strategy and the potential outcomes.

      :rtype: polars.DataFrame


   .. py:method:: bull_put_spread()


   .. py:method:: bear_put_spread()



.. py:class:: PositionBuilder(long_call: List[OptionParam], short_call: List[OptionParam], long_put: List[OptionParam], short_put: List[OptionParam], long_ua: List[UAParam], short_ua: List[UAParam], st_range: StParam)


   Build any position and get simulate profit.

   :param long_call: List[OptionParam] long call position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param short_call: List[OptionParam] short call position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param long_put: List[OptionParam] long put position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param short_put: List[OptionParam] short put position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param long_ua: List[UAParam] long underlying asset position params e.g. [{'splot_price':18_000, 'qty':1}]
   :param short_ua: List[UAParam] short underlying asset position params e.g. [{'splot_price':18_000, 'qty':1}]
   :param st_range:
                    StParam to create range of price of assets at maturity,
                        e.g. {'min':2000, 'max':5000,'step':10}

   .. py:method:: simulate_profit() -> List[int]

      The simulation of profit for all given position within the specified range.

      :rtype: List[int]

      .. rubric:: Examples

      >>> from xuk.options import PositionBuilder
      >>> positions = {
      ...    "long_call": [],
      ...    "short_call": [
      ...        {"k": 22_000, "premium": 2_000, "qty": 2},
      ...        {"k": 24_000, "premium": 1_000, "qty": 1},
      ...    ],
      ...    "long_put": [],
      ...    "short_put": [],
      ...    "long_ua": [{"spot_price": 20_000, "qty": 3}],
      ...    "short_ua": [],
      ...}
      >>> pb = PositionBuilder(**positions, st_range={"min": 15_000, "max": 30_000, "step": 10})
      >>> print(pb.simulate_profit())
        [-10000, -9970, ...]
           >>>



.. py:class:: OptionPositionProfit(st: int, k: int, premium: int, qty: int = 1)


   Calculate option position profit.

   :param st: int, underlying asset price at time of t
   :param k: int, strike price
   :param premium: int, premium
   :param qty: int, quantity

   .. py:method:: long_call() -> int

      Calculate long call position profit.

      :rtype: int


   .. py:method:: short_call() -> int

      Calculate short call position profit.

      :rtype: int


   .. py:method:: long_put() -> int

      Calculate long put position profit.

      :rtype: int


   .. py:method:: short_put() -> int

      Calculate short call position profit.

      :rtype: int



.. py:class:: AssetPositionProfit(price: int, st: int, qty: int = 1)


   Calculate asset position profit.

   :param price: int, asset price at time of 0
   :param st: int, asset price at time of t
   :param qty: int, quantity

   .. py:method:: long() -> int

      Calculate long UA position profit.

      :rtype: int


   .. py:method:: short() -> int

      Calculate short UA position profit.

      :rtype: int



.. py:class:: Pricing


   .. raw:: html

       <div dir="rtl">
           مدل‌هایِ قیمت-گذاریِ اختیارِ-معامله رو پوشش میده.
       </div>

   .. py:method:: black_scholes_merton(s0: float | int, k: float | int, t: int, sigma: float, type_: OptionType, r: float, div: float | int = 0) -> float

      .. raw:: html

          <div dir="rtl">
              مدلِ قیمت-گذاریِ بلک-شولز-مرتون برای اختارِ-معامله‌هایِ اروپایی.
          </div>

      :math:`C = N(d_1)S_T-N(d_2)K_e^{-rT}`

      where

      .. line-block::
          :math:`d_1 = \frac {ln\frac{S_T}{K}+(r+\frac {\sigma^2}{2})T}{\sigma\sqrt{T}}`
          :math:`d_2 = d_1 - \sigma\sqrt{T}`
          :math:`C`: call option value
          :math:`S_t`: underlying asset price
          :math:`N`: CDF of the normal distribution
          :math:`K`: strike-price
          :math:`e`: the base of the natural log function, approximately 2.71828
          :math:`r`: risk-free interest rate
          :math:`T`: time to expiration of option, in years
          :math:`ln`: natural logarithm function
          :math:`\sigma`: standard deviation of the annualized continuously compounded rate of return of the underlying asset.

      :param s0: قیمتِ داراییِ پایه
      :type s0: int or float
      :param k: قیمتِ اعمال
      :type k: int or float
      :param t: تعدادِ روزهایِ مانده تا تاریخِ اعمال
      :type t: int
      :param sigma: انحراف-از-معیارِ روزانه‌یِ داراییِ پایه
      :type sigma: float
      :param type\_: نوعِ اختیار
      :type type\_: OptionType, {'call', 'put'}
      :param r: نرخِ بهره‌یِ بدونِ ریسک- سالانه
      :type r: float
      :param div: سودِ تقسیمیِ داراییِ پایه قبل از تاریخِ اعمال
      :type div: int or float, default 0

      :returns: **option value**
      :rtype: float

      .. rubric:: Example

      >>> from xuk.options import Pricing
      >>> Pricing().black_scholes_merton(s0=148_000, k=200_000, t=6, sigma=0.05, type_="put", r =0.25)
      51188.254650913295



