:py:mod:`xuk.options`
=====================

.. py:module:: xuk.options


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   position_builder/index.rst
   position_profit/index.rst
   pricing/index.rst
   strategy/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   xuk.options.Strategy
   xuk.options.PositionBuilder
   xuk.options.OptionPositionProfit
   xuk.options.AssetPositionProfit
   xuk.options.Pricing




.. py:class:: Strategy(call: Optional[polars.DataFrame] = pl.DataFrame(), put: Optional[polars.DataFrame] = pl.DataFrame(), call_put: Optional[polars.DataFrame] = pl.DataFrame())


   .. raw:: html

       <div dir="rtl">
           پارامترهایِ مهمِ مربوط به استراتژی‌هایِ اختیارِ-معامله رو حساب می‌کنه.
       </div>

   :param call: polars.DataFrame with (ua:str, ua_ask_price:int, ua_bid_price:int, symbol:str, k:int,
                t:int, bs:int, bid_price:int, ask_price:int) columns. Where ua: Underlying Asset, bs : Black-Scholes
                price, t: Days to expiration date
   :param put: polars.DataFrame with (ua:str, ua_ask_price:int, ua_bid_price:int, symbol:str, k:int,
               t:int, bs:int, bid_price:int, ask_price:int) columns. Where ua: Underlying Asset, bs : Black-Scholes
               price, t: Days to expiration date
   :param call_put:

   .. rubric:: Examples

   Import libraries

   >>> from oxtapus import TSETMC
   >>> from xuk.options import Strategy
   >>> import polars as pl

   Get option data and create object

   >>> data = TSETMC().options_mw()
   >>> stg = Strategy(call=data.filter(pl.col("type")=="call"), put=data.filter(pl.col("type")=="put")

   Call strategies

   >>> stg.covered_call()
   shape: (928, 16)
   ┌───────────┬────────────┬───┬────────────┬────────────────┐
   │  writing  ┆ writing_at ┆ … ┆   pct_cp   ┆ pct_monthly_cp │
   │    ---    ┆     ---    ┆   ┆     ---    ┆       ---      │
   │    str    ┆     f64    ┆   ┆     f64    ┆       f64      │
   ╞═══════════╪════════════╪═══╪════════════╪════════════════╡
   │ xxxx 8001 ┆   1961.0   ┆ … ┆  -0.128406 ┆    -0.226599   │
   │     …     ┆      …     ┆ … ┆      …     ┆        …       │
   │ zzzz 1100 ┆    600.0   ┆ … ┆ -16.666667 ┆      -4.0      │
   └───────────┴────────────┴───┴────────────┴────────────────┘

   .. py:method:: covered_call() -> polars.DataFrame

      .. raw:: html

          <div dir="rtl">
              در این استراتژی داراییِ پایه خریداری می‌شه و اختیارِ خرید فروخته می‌شه.
          </div>

      :returns: * *polars.DataFrame contain (writing, writing_at, buy_ua, buy_ua_at,k,t, pct_status,*
                * *break_even, pct_break_even, max_pot_loss, max_pot_profit, pct_mpp, pct_monthly_cp, current_profit, pct_cp,*
                * *pct_monthly_cp) columns.*


   .. py:method:: married_put() -> polars.DataFrame

      .. raw:: html

          <div dir="rtl">
              در این استراتژی داراییِ پایه و اختیارِ فروش خریداری می‌شه.
          </div>

      :rtype: polars.DataFrame


   .. py:method:: bull_call_spread()

      .. raw:: html

          <div dir="rtl">
              در این استراتژی یِ اختیارِ خرید با قیمتِ اعمالِ پایین‌تر خریداری می‌شه و همزمان اختیارِ خریدِ دیگه‌ای با
              تارخِ اعمالِ و داراییِ پایه‌یِ همسان، اما قیمتِ اعمالِ بالاتر فروخته می‌شه.
          </div>

      A bull call spread involves two call options with the same expiration date:

      #. Buy a call option at a lower strike price (gives you the right to buy at that price).
      #. Sell a call option at a higher strike price (obligates you to sell at that price).

      This strategy:

      * **Requires an upfront cost:** You pay a premium for the call option you buy.
      * **Reduces the cost by selling a call option:** You receive a premium from selling the higher strike call.
      * **Limits potential losses:** Your maximum loss is capped at the difference in strike prices minus the net         premium paid.

      Caps potential profits: Profit is limited to the difference in strike prices minus the net premium paid.
      It's used when you're moderately bullish on the underlying asset, expecting its price to stay above the lower
      strike price by expiration. However, like any options strategy, it's crucial to assess risks and ensure it
      aligns with your investment goals and risk tolerance.

      :rtype: polars.DataFrame


   .. py:method:: bear_call_spread()

      .. raw:: html

          <div dir="rtl">
              در این استراتژی یِ اختیارِ خرید با قیمتِ اعمالِ بالاتر خریداری می‌شه و همزمان اختیارِ خریدِ دیگه‌ای با
              تارخِ اعمالِ و داراییِ پایه‌یِ همسان، اما قیمتِ اعمالِ پایین‌تر فروخته می‌شه.
          </div>


      A bear call spread involves two call options with the same expiration date:

      #. Sell a call option at a lower strike price (obligates you to sell at that price).
      #. Buy a call option at a higher strike price (gives you the right to buy at that price).

      This strategy:

      * **Generates income:** You receive a premium by selling the call option.
      * **Limits risk:** Your maximum loss is capped, and it's reduced by the premium received.
      * **Caps potential profits:** Profit is limited to the premium received.

      It's used when you're moderately bearish on the underlying asset, expecting its price to stay below the lower
      strike price by expiration. However, it's important to assess risks and ensure this strategy aligns with your
      investment goals and risk tolerance before implementing it.

      :rtype: polars.DataFrame


   .. py:method:: bull_put_spread()

      .. raw:: html

          <div dir="rtl">
              در این استراتژی یِ اختیارِ فروش با قیمتِ اعمالِ پایین‌تر خریداری می‌شه و همزمان اختیارِ فروشِ دیگه‌ای با
              تارخِ اعمالِ و داراییِ پایه‌یِ همسان، اما قیمتِ اعمالِ بالاتر فروخته می‌شه.
          </div>

      A bull put spread is an options trading strategy used when an investor expects a moderate increase in the price
      of the underlying asset. It involves two put options: selling one put option and buying another put option with
      the same expiration date but at a lower strike price. Here’s how it works:

      #. Sell a Put Option: You sell a put option with a higher strike price, usually out-of-the-money (OTM), to
      receive a premium.

      #. Buy a Put Option: Simultaneously, you buy a put option with a lower strike price, usually in-the-money (ITM),
      paying a smaller premium.

      The idea behind a bull put spread is to benefit from a bullish market while limiting potential losses. The
      maximum profit is the difference between the premiums received and paid, and it occurs if the underlying asset’s
      price remains above the higher strike price at expiration. The maximum loss is limited to the difference between
      the strike prices minus the net premium received.

      This strategy allows you to capitalize on a moderate rise in the underlying asset's price, and by using options,
      it provides a defined risk-reward scenario.

      :rtype: polars.DataFrame


   .. py:method:: bear_put_spread()

      .. raw:: html

          <div dir="rtl">
              در این استراتژی یِ اختیارِ فروش با قیمتِ اعمالِ پایین‌تر خریداری می‌شه و همزمان اختیارِ فروشِ دیگه‌ای با
              تارخِ اعمالِ و داراییِ پایه‌یِ همسان، اما قیمتِ اعمالِ بالاتر فروخته می‌شه.
          </div>


      A bear put spread, also known as a put debit spread or a bear put credit spread, is an options trading strategy
      used when an investor expects a moderate decrease in the price of the underlying asset. It involves buying one
      put option and simultaneously selling another put option with the same expiration date but at a lower strike
      price. Here's how it works:

      #. Buy a Put Option: You buy a put option with a higher strike price, usually in-the-money (ITM), paying a
      higher premium.

      #. Sell a Put Option: Simultaneously, you sell a put option with a lower strike price, usually out-of-the-money
      (OTM), to receive a premium.

      The goal of a bear put spread is to profit from a declining market while limiting potential losses. The maximum
      profit is the difference between the strike prices minus the net premium paid, and it occurs if the underlying
      asset's price is below the lower strike price at expiration. The maximum loss is limited to the net premium paid
      for the spread.

      This strategy allows you to benefit from a moderate decline in the underlying asset's price, and by using
      options, it provides a defined risk-reward scenario.

      Here's a brief summary of the key points:

      * **Maximum Profit:** The difference between the strike prices minus the net premium paid.
      * **Maximum Loss:** Limited to the net premium paid for the spread.
      * **Break-even Point:** The underlying asset's price at which the total gains equal the total losses, and it is
      calculated as the higher strike price minus the net premium paid.

      :rtype: polars.DataFrame



.. py:class:: PositionBuilder(long_call: List[OptionParam], short_call: List[OptionParam], long_put: List[OptionParam], short_put: List[OptionParam], long_ua: List[UAParam], short_ua: List[UAParam], st_range: StParam)


   Build any position and get simulate profit.

   :param long_call: List[OptionParam] long call position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param short_call: List[OptionParam] short call position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param long_put: List[OptionParam] long put position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param short_put: List[OptionParam] short put position params e.g. [{'k':22_000, 'premium':2_000, 'qty':2}]
   :param long_ua: List[UAParam] long underlying asset position params e.g. [{'splot_price':18_000, 'qty':1}]
   :param short_ua: List[UAParam] short underlying asset position params e.g. [{'splot_price':18_000, 'qty':1}]
   :param st_range:
                    StParam to create range of price of assets at maturity,
                        e.g. {'min':2000, 'max':5000,'step':10}

   .. py:method:: simulate_profit() -> List[int]

      The simulation of profit for all given position within the specified range.

      :rtype: List[int]

      .. rubric:: Examples

      >>> from xuk.options import PositionBuilder
      >>> positions = {
      ...    "long_call": [],
      ...    "short_call": [
      ...        {"k": 22_000, "premium": 2_000, "qty": 2},
      ...        {"k": 24_000, "premium": 1_000, "qty": 1},
      ...    ],
      ...    "long_put": [],
      ...    "short_put": [],
      ...    "long_ua": [{"spot_price": 20_000, "qty": 3}],
      ...    "short_ua": [],
      ...}
      >>> pb = PositionBuilder(**positions, st_range={"min": 15_000, "max": 30_000, "step": 10})
      >>> print(pb.simulate_profit())
        [-10000, -9970, ...]
           >>>



.. py:class:: OptionPositionProfit(st: int, k: int, premium: int, qty: int = 1)


   Calculate option position profit.

   :param st: int, underlying asset price at time of t
   :param k: int, strike price
   :param premium: int, premium
   :param qty: int, quantity

   .. py:method:: long_call() -> int

      Calculate long call position profit.

      :rtype: int


   .. py:method:: short_call() -> int

      Calculate short call position profit.

      :rtype: int


   .. py:method:: long_put() -> int

      Calculate long put position profit.

      :rtype: int


   .. py:method:: short_put() -> int

      Calculate short call position profit.

      :rtype: int



.. py:class:: AssetPositionProfit(price: int, st: int, qty: int = 1)


   Calculate asset position profit.

   :param price: int, asset price at time of 0
   :param st: int, asset price at time of t
   :param qty: int, quantity

   .. py:method:: long() -> int

      Calculate long UA position profit.

      :rtype: int


   .. py:method:: short() -> int

      Calculate short UA position profit.

      :rtype: int



.. py:class:: Pricing


   .. raw:: html

       <div dir="rtl">
           مدل‌هایِ قیمت-گذاریِ اختیارِ-معامله رو پوشش میده.
       </div>

   .. py:method:: black_scholes_merton(s0: float | int, k: float | int, t: int, sigma: float, type_: OptionType, r: float, div: float | int = 0) -> float

      .. raw:: html

          <div dir="rtl">
              مدلِ قیمت-گذاریِ بلک-شولز-مرتون برای اختارِ-معامله‌هایِ اروپایی.
          </div>

      :math:`C = N(d_1)S_T-N(d_2)K_e^{-rT}`

      where

      .. line-block::
          :math:`d_1 = \frac {ln\frac{S_T}{K}+(r+\frac {\sigma^2}{2})T}{\sigma\sqrt{T}}`
          :math:`d_2 = d_1 - \sigma\sqrt{T}`
          :math:`C`: call option value
          :math:`S_t`: underlying asset price
          :math:`N`: CDF of the normal distribution
          :math:`K`: strike-price
          :math:`e`: the base of the natural log function, approximately 2.71828
          :math:`r`: risk-free interest rate
          :math:`T`: time to expiration of option, in years
          :math:`ln`: natural logarithm function
          :math:`\sigma`: standard deviation of the annualized continuously compounded rate of return of the underlying asset.

      :param s0: قیمتِ داراییِ پایه
      :type s0: int or float
      :param k: قیمتِ اعمال
      :type k: int or float
      :param t: تعدادِ روزهایِ مانده تا تاریخِ اعمال
      :type t: int
      :param sigma: انحراف-از-معیارِ روزانه‌یِ داراییِ پایه
      :type sigma: float
      :param type\_: نوعِ اختیار
      :type type\_: OptionType, {'call', 'put'}
      :param r: نرخِ بهره‌یِ بدونِ ریسک- سالانه
      :type r: float
      :param div: سودِ تقسیمیِ داراییِ پایه قبل از تاریخِ اعمال
      :type div: int or float, default 0

      :returns: **option value**
      :rtype: float

      .. rubric:: Example

      >>> from xuk.options import Pricing
      >>> Pricing().black_scholes_merton(s0=148_000, k=200_000, t=6, sigma=0.05, type_="put", r =0.25)
      51188.254650913295



